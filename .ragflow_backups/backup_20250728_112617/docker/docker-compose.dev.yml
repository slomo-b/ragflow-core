# docker/docker-compose.dev.yml - SIMPLIFIED & RELIABLE VERSION
version: '3.8'

networks:
  ragflow_network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  uploads:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ragflow-postgres
    environment:
      POSTGRES_DB: ragflow
      POSTGRES_USER: ragflow
      POSTGRES_PASSWORD: ragflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ragflow -d ragflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: ragflow-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - ragflow_network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/6333'"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ragflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API - SIMPLIFIED BUILD
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.simple
    container_name: ragflow-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://ragflow:ragflow@postgres:5432/ragflow
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../backend:/app
      - uploads:/app/uploads
    networks:
      - ragflow_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped