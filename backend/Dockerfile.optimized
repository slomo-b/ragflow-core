# docker/docker-compose.dev.yml - OPTIMIZED VERSION
# Features:
# - Multi-stage builds for better caching
# - Separate dependency and code layers
# - BuildKit optimizations
# - Conditional rebuilds

networks:
  ragflow_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  # NEW: Dependency cache volumes
  backend_pip_cache:
    driver: local
  frontend_node_modules:
    driver: local

services:
  # PostgreSQL Database - No changes needed
  postgres:
    image: postgres:15-alpine
    container_name: ragflow-postgres
    environment:
      POSTGRES_DB: ragflow
      POSTGRES_USER: ragflow
      POSTGRES_PASSWORD: ragflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ragflow -d ragflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Qdrant Vector Database - No changes needed
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: ragflow-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - ragflow_network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/6333'"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache - No changes needed
  redis:
    image: redis:7-alpine
    container_name: ragflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

  # OPTIMIZED Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.optimized
      # BuildKit features for better caching
      cache_from:
        - ragflow-backend:latest
      target: development
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: ragflow-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DEBUG=true
      - DATABASE_URL=postgresql://ragflow:ragflow@postgres:5432/ragflow
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379/0
      # Enable Python optimization
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Code volume (for hot reload)
      - ../backend/app:/app/app:ro
      # Persistent volumes
      - uploads:/app/uploads
      # Dependency cache (survives container restarts)
      - backend_pip_cache:/root/.cache/pip
    networks:
      - ragflow_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Longer start period for ML dependencies
    restart: unless-stopped

  # OPTIMIZED Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.optimized
      cache_from:
        - ragflow-frontend:latest
      target: development
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: ragflow-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      # Code volume (for hot reload)
      - ../frontend/src:/app/src:ro
      - ../frontend/public:/app/public:ro
      # Persistent node_modules (huge performance boost)
      - frontend_node_modules:/app/node_modules
    networks:
      - ragflow_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

# ===== OPTIMIZED BACKEND DOCKERFILE =====
# backend/Dockerfile.optimized

FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=0

# Install system dependencies (cached layer)
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# ===== DEPENDENCY STAGE =====
FROM base as dependencies

# Copy only requirements first (for better caching)
COPY requirements.txt .

# Create pip cache directory
RUN mkdir -p /root/.cache/pip

# Install dependencies with caching
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -r requirements.txt

# ===== DEVELOPMENT STAGE =====
FROM dependencies as development

# Create necessary directories
RUN mkdir -p /app/app /app/uploads

# Copy application code (this layer changes most often)
COPY app/ ./app/

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/ping || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ===== PRODUCTION STAGE (for later) =====
FROM dependencies as production

# Copy application code
COPY app/ ./app/

# Create non-root user for security
RUN groupadd -r ragflow && useradd -r -g ragflow ragflow
RUN chown -R ragflow:ragflow /app
USER ragflow

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/ping || exit 1

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
