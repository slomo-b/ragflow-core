# docker/docker-compose.dev.yml - KORRIGIERT
version: '3.8'

networks:
  ragflow_network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ragflow-postgres
    environment:
      POSTGRES_DB: ragflow
      POSTGRES_USER: ragflow
      POSTGRES_PASSWORD: ragflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ragflow -d ragflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Vector Database - Qdrant
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: ragflow-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - ragflow_network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    # FIXED: Verwende wget statt curl (ist in Qdrant Container verf√ºgbar)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ragflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: ragflow-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ragflow:ragflow@postgres:5432/ragflow
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - PYTHONPATH=/app
    volumes:
      - ../backend:/app
      - uploads:/app/uploads
    networks:
      - ragflow_network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: ragflow-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - ragflow_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local